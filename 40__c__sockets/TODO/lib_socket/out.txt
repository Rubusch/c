# TODO rm LIBFREE_OBJS LIBGAI_OBJS LIBROUTE_OBJS LIBUNPXTI LIBUNPXTI_NAME LIBS_XTI LIBXTI_OBJS

./configure:ac_unique_file="lib/unp.h"
./configure:ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT RANLIB ac_ct_RANLIB CPP EGREP LIB_OBJS LIBFREE_OBJS LIBGAI_OBJS LIBROUTE_OBJS LIBXTI_OBJS LIBS_XTI LIBUNP LIBUNPXTI LIBUNP_NAME LIBUNPXTI_NAME LIBOBJS LTLIBOBJS'

./configure:echo "$as_me:$LINENO: checking for $HOME/libunp.a" >&5
./configure:echo $ECHO_N "checking for $HOME/libunp.a... $ECHO_C" >&6
./configure:if test -f $HOME/libunp.a ; then
./configure:	LIBUNP="$HOME/libunp.a"
./configure:	LIBUNP_NAME=$HOME/libunp.a
./configure:	LIBUNP="../libunp.a"
./configure:	LIBUNP_NAME=../libunp.a
./configure:echo "$as_me:$LINENO: checking for $HOME/libunpxti.a" >&5
./configure:echo $ECHO_N "checking for $HOME/libunpxti.a... $ECHO_C" >&6
./configure:if test -f $HOME/libunpxti.a ; then
./configure:	LIBUNPXTI="$HOME/libunpxti.a"
./configure:	LIBUNPXTI_NAME=$HOME/libunpxti.a
./configure:	LIBUNPXTI="../libunpxti.a"
./configure:	LIBUNPXTI_NAME=../libunpxti.a
./configure:echo "$as_me:$LINENO: checking for -I$HOME/doc/unp2ev1/src/include" >&5
./configure:echo $ECHO_N "checking for -I$HOME/doc/unp2ev1/src/include... $ECHO_C" >&6
./configure:if test -d $HOME/doc/unp2ev1/src/include ; then
./configure:	CFLAGS="$CFLAGS -I$HOME/doc/unp2ev1/src/include"
./configure:s,@LIBUNP@,$LIBUNP,;t t
./configure:s,@LIBUNPXTI@,$LIBUNPXTI,;t t
./configure:s,@LIBUNP_NAME@,$LIBUNP_NAME,;t t
./configure:s,@LIBUNPXTI_NAME@,$LIBUNPXTI_NAME,;t t
./configure.in:dnl autoconf script for UNP 3/e Volume 1 source code.
./configure.in:dnl The header "unp.h" that is in every source directory then does a
./configure.in:AC_INIT(lib/unp.h)
./configure.in:dnl	LIBUNP="./libunp.a"
./configure.in:dnl	LIBUNPXTI="./libunpxti.a"
./configure.in:dnl If the user has a file named $HOME/libunp.a, then use it.
./configure.in:AC_MSG_CHECKING(for $HOME/libunp.a)
./configure.in:if test -f $HOME/libunp.a ; then
./configure.in:	LIBUNP="$HOME/libunp.a"
./configure.in:	LIBUNP_NAME=$HOME/libunp.a
./configure.in:	AC_MSG_RESULT(no, using ./libunp.a)
./configure.in:	LIBUNP="../libunp.a"
./configure.in:	LIBUNP_NAME=../libunp.a
./configure.in:dnl If the user has a file named $HOME/libunpxti.a, then use it.
./configure.in:AC_MSG_CHECKING(for $HOME/libunpxti.a)
./configure.in:if test -f $HOME/libunpxti.a ; then
./configure.in:	LIBUNPXTI="$HOME/libunpxti.a"
./configure.in:	LIBUNPXTI_NAME=$HOME/libunpxti.a
./configure.in:	AC_MSG_RESULT(no, using ./libunpxti.a)
./configure.in:	LIBUNPXTI="../libunpxti.a"
./configure.in:	LIBUNPXTI_NAME=../libunpxti.a
./configure.in:dnl our "unp.h" header, followed by our "unpxti.h" header.
./configure.in:dnl We use our own AC_UNP_CHECK_TYPE macro, instead of AC_CHECK_TYPE,
./configure.in:AC_UNP_CHECK_TYPE(uint8_t, unsigned char, 8-bit unsigned type)
./configure.in:AC_UNP_CHECK_TYPE(int16_t, short, 16 bit signed type)
./configure.in:AC_UNP_CHECK_TYPE(uint16_t, unsigned short, 16 bit unsigned type)
./configure.in:AC_UNP_CHECK_TYPE(int32_t, int, 32 bit signed type)
./configure.in:AC_UNP_CHECK_TYPE(uint32_t, unsigned int, 32 bit unsigned type)
./configure.in:AC_UNP_CHECK_TYPE(size_t, unsigned int, unsigned integer type of the result of the sizeof operator)
./configure.in:AC_UNP_CHECK_TYPE(ssize_t, int, a signed type appropriate for a count of bytes or an error indication)
./configure.in:AC_UNP_CHECK_TYPE(socklen_t, unsigned int, a type appropriate for address, hostname, buffer, etc. lengths)
./configure.in:AC_UNP_CHECK_TYPE(sa_family_t, SA_FAMILY_T, the type of the sa_family struct member)
./configure.in:dnl be defined after #include of our "unpxti.h" header.
./configure.in:AC_UNPXTI_CHECK_TYPE(t_scalar_t, int32_t, scalar type)
./configure.in:AC_UNPXTI_CHECK_TYPE(t_uscalar_t, uint32_t, unsigned scalar type)
./configure.in:AC_SUBST(LIBUNP)
./configure.in:AC_SUBST(LIBUNPXTI)
./configure.in:AC_SUBST(LIBUNP_NAME)
./configure.in:AC_SUBST(LIBUNPXTI_NAME)
./configure.in:dnl If the directory $HOME/doc/unp2ev1/src/include exists, the user can
./configure.in:AC_MSG_CHECKING(for -I$HOME/doc/unp2ev1/src/include)
./configure.in:if test -d $HOME/doc/unp2ev1/src/include ; then
./configure.in:	CFLAGS="$CFLAGS -I$HOME/doc/unp2ev1/src/include"
./lib_socket.c:      struct sockaddr_un *unp = (struct sockaddr_un *) sa;
./lib_socket.c:      if(0 == unp->sun_path[0]){
./lib_socket.c:        snprintf(str, sizeof(str), "%s", unp->sun_path);
./lib_socket.c:      struct sockaddr_un *unp = (struct sockaddr_un *) sa;
./lib_socket.c:      if(0 == unp->sun_path[0]){
./lib_socket.c:        snprintf(str, sizeof(str), "%s", unp->sun_path);
