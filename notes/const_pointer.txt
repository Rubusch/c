const pointer



REFERENCES

https://en.cppreference.com/w/c/language/array
https://www.geeksforgeeks.org/const-qualifier-in-c/
https://stackoverflow.com/questions/15157113/position-of-const-keyword


                    |                        | change        | change
                    | Declaration            | pointer value | pointing value
                    |                        |               |
                    |                        | *ptr = 100;   | ptr = &var;
--------------------+------------------------+---------------+------------------
Pointer to variable | int *ptr;              | yes           | yes
                    |                        |               |
Pointer to constant | const int *ptr; // or  | no            | yes
                    | int const *ptr;        |               |
                    |                        |               |
Constant pointer    | int* const ptr;        | yes           | no
     to variable    |                        |               |
                    |                        |               |
Constant pointer    | const int* const ptr;  | no            | no
     to constant    |                        |               |

NB: when initializing an array by a "const int" size, in C99 this
becomes a VLA (variable lenght array), in C11 and if the compiler
defines the macro constant __STDC_NO_VLA__ to integer constant 1, then
VLA and VM types are not supported




EXAMLE

What's the difference between the following three pointer declarations in C:

I)	void * const myPointer1;
II)	void const *myPointer2;
		or const void *myPointer3;

And which one is used to prevent:

	myPointer = somethingElse;





SOLUTION

Read the rules from right to left:

void * const myPointer1;
myPointer1 is a const pointer to void.

void const *myPointer2;
myPointer2 is a pointer to a const void.

const void *myPointer3;
myPointer3 is a pointer to a void const.





CONCLUSION

myPointer1 is a const pointer, so its value cannot be modified.
myPointer2 and myPointer3 are the same thing and not helpful here.
